// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js Models
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    decks         Deck[]
    folders       Folder[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Card {
    id          String   @id @default(cuid())
    front    String
    back      String
    deck        Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
    deckId      String
    reviews     CardReview[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Deck {
    id          String   @id @default(cuid())
    owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId     String
    folder      Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)
    folderId    String?
    name        String
    description String?
    cards       Card[]
    reviews     DeckReview[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model DeckReview {
    id          String   @id @default(cuid())
    deck        Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
    deckId      String
    duration    Int
    gradeAvg    Float
    cardReviews CardReview[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model CardReview {
    id          String   @id @default(cuid())
    card        Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
    cardId      String
    deckReview  DeckReview     @relation(fields: [deckReviewId], references: [id], onDelete: Cascade)
    deckReviewId String
    grade       Int
    easiness    Float
    interval    Int
    streak      Int
    duration    Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Folder {
    id          String   @id @default(cuid())
    owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId     String
    name        String
    decks       Deck[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

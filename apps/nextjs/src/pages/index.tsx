import { useState } from "react";
import Head from "next/head";
import { signIn, signOut } from "next-auth/react";

import { api, type RouterOutputs } from "~/utils/api";
import MainLayout from "~/components/Layout/MainLayout";
import CreateDeck from "~/features/decks/components/CreateDeck";
import DeckList from "~/features/decks/components/DeckList";
import { type NextPageWithLayout } from "~/pages/_app";

function DeckCard(props: {
  deck: RouterOutputs["deck"]["all"][number];
  onDeckDelete: () => void;
}) {
  return (
    <div className="flex flex-row rounded-lg bg-white/10 p-4 transition-all hover:scale-[101%]">
      <div className="flex-grow">
        <h2 className="text-2xl font-bold text-pink-400">{props.deck.name}</h2>
        <p className="mt-2 text-sm">{props.deck.description}</p>
      </div>
      <div>
        <span
          className="cursor-pointer text-sm font-bold uppercase text-pink-400"
          onClick={props.onDeckDelete}
        >
          Delete
        </span>
      </div>
    </div>
  );
}

function CreatePostForm() {
  const utils = api.useContext();

  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");

  const { mutate, error } = api.deck.create.useMutation({
    async onSuccess() {
      setTitle("");
      setContent("");
      await utils.deck.all.invalidate();
    },
  });

  return (
    <div className="flex w-full max-w-2xl flex-col p-4">
      <input
        className="mb-2 rounded bg-white/10 p-2 text-white"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        placeholder="Title"
      />
      {error?.data?.zodError?.fieldErrors.title && (
        <span className="mb-2 text-red-500">
          {error.data.zodError.fieldErrors.title}
        </span>
      )}
      <input
        className="mb-2 rounded bg-white/10 p-2 text-white"
        value={content}
        onChange={(e) => setContent(e.target.value)}
        placeholder="Content"
      />
      {error?.data?.zodError?.fieldErrors.content && (
        <span className="mb-2 text-red-500">
          {error.data.zodError.fieldErrors.content}
        </span>
      )}
      <button
        className="rounded bg-pink-400 p-2 font-bold"
        onClick={() => {
          mutate({
            name: title,
            description: content,
          });
        }}
      >
        Create
      </button>
    </div>
  );
}

const Home: NextPageWithLayout = () => {
  const deckQuery = api.deck.all.useQuery();
  const deleteDeckMutation = api.deck.delete.useMutation({
    onSettled: () => deckQuery.refetch(),
  });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={"flex items-center justify-between"}>
        <h1 className={"text-5xl"}>Decks</h1>
        <CreateDeck />
      </div>
      <DeckList />
    </>
  );
};

Home.auth = true;

Home.getLayout = (page) => {
  return <MainLayout>{page}</MainLayout>;
};

export default Home;

function AuthShowcase() {
  const { data: session } = api.auth.getSession.useQuery();

  const { data: secretMessage } = api.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: !!session?.user },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      {session?.user && (
        <p className="text-center text-2xl text-white">
          {session && <span>Logged in as {session?.user?.name}</span>}
          {secretMessage && <span> - {secretMessage}</span>}
        </p>
      )}
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={session ? () => void signOut() : () => void signIn()}
      >
        {session ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}

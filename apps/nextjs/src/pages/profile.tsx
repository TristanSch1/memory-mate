import {
  type GetServerSideProps,
  type InferGetServerSidePropsType,
} from "next";
import Error from "next/error";
import Head from "next/head";
import { appConfig } from "@/_config";
import { MainLayout } from "@/components/layout";
import { UserInfos, UserStatistics } from "@/features/user";
import { type NextPageWithLayout } from "@/pages/_app";
import { api } from "@/utils/api";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { useTranslation } from "next-i18next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import superjson from "superjson";

import { appRouter } from "@memory-mate/api";
import { createInnerTRPCContext } from "@memory-mate/api/src/trpc";
import { getServerSession } from "@memory-mate/auth";

const Profile: NextPageWithLayout = ({
  session,
}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  console.log(session);
  const { data: stats } = api.user.stats.useQuery({ userId: session.user.id });
  const { t } = useTranslation("profile");

  if (!stats) return <Error statusCode={404} />;
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1 className={"page-title mb-8"}>{t("title")}</h1>
      <div className={"space-y-4"}>
        <UserInfos user={session.user} />
        <UserStatistics userId={session.user.id} />
      </div>
    </>
  );
};

Profile.auth = true;

Profile.getLayout = (page) => {
  return <MainLayout>{page}</MainLayout>;
};

export const getServerSideProps: GetServerSideProps = async ({
  req,
  res,
  locale,
}) => {
  const session = await getServerSession({ req, res });
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: createInnerTRPCContext({ session }),
    transformer: superjson,
  });
  if (!session) {
    return {
      redirect: {
        destination: "/auth/signin",
        permanent: false,
      },
    };
  }
  await helpers.user.stats.prefetch({ userId: session.user.id });
  return {
    props: {
      trpcState: helpers.dehydrate(),
      session,
      ...(await serverSideTranslations(locale ?? appConfig.defaultLocale, [
        "common",
        "profile",
      ])),
    },
  };
};

export default Profile;
